name: Android Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Java
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Step 3: Setup Gradle wrapper files
    - name: Setup Gradle wrapper
      run: |
        echo "Creating Gradle wrapper files..."
        
        # Navigate to the project directory
        cd aptlinks
        
        # Create gradlew script
        cat > gradlew << 'EOF'
#!/usr/bin/env sh
# Gradle startup script for Unix

# Add default JVM options here
DEFAULT_JVM_OPTS=""

# Use the maximum available
MAX_FD="maximum"

APP_BASE_NAME=`basename "$0"`
APP_HOME=`dirname "$0"`

# Determine the Java command to use
if [ -n "$JAVA_HOME" ] ; then
    JAVACMD="$JAVA_HOME/bin/java"
else
    JAVACMD="java"
fi

# Create directory structure if needed
mkdir -p gradle/wrapper

# Use gradle-wrapper.jar to execute gradle commands
exec "$JAVACMD" $DEFAULT_JVM_OPTS \
        -classpath "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        org.gradle.wrapper.GradleWrapperMain "$@"
EOF
        
        # Create gradlew.bat for Windows
        cat > gradlew.bat << 'EOF'
@echo off
@rem Gradle startup script for Windows

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome
set JAVACMD=java.exe
goto execute

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVACMD=%JAVA_HOME%/bin/java.exe

:execute
@rem Setup the command line
set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVACMD%" %DEFAULT_JVM_OPTS% -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
EOF
        
        # Download gradle-wrapper.jar
        curl -L -o gradle/wrapper/gradle-wrapper.jar "https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar"
        
        # Make gradlew executable
        chmod +x gradlew
        
        echo "Gradle wrapper files created successfully."
        ls -la
        ls -la gradle/wrapper/

    # Step 4: Build the debug APK
    - name: Build debug APK
      run: |
        cd aptlinks
        ./gradlew assembleDebug --stacktrace
      
    # Step 5: List the files to verify APK was created
    - name: List output files
      run: |
        echo "APK files:"
        find aptlinks -name "*.apk"
      
    # Step 6: Upload the APK as an artifact
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: app-debug
        path: aptlinks/app/build/outputs/apk/debug/app-debug.apk
